<?php

namespace Tests\Unit;

use App\Channel;
use App\Thread;
use Illuminate\Database\Eloquent\Collection;
use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;
class ThreadTest extends TestCase
{
    use DatabaseMigrations;

    protected $thread;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->thread = factory('App\Thread')->create();
    }

    public function test_a_thread_have_replies(){
        $this->assertInstanceOf(Collection::class, $this->thread->replies);
    }

    public function test_a_thread_belongs_to_an_owner(){

        $this->assertInstanceOf('App\User', $this->thread->owner);
    }

    public function test_a_thread_can_add_a_reply(){

        $reply = factory('App\Reply')->make(['thread_id' => $this->thread->id]);
        $this->thread->addReply([
           'body' => $reply->body,
           'user_id' => $reply->user->id
        ]);

        $this->assertCount(1, $this->thread->replies);
    }

    public function test_a_thread_belongs_to_a_channel(){
        $thread = factory(Thread::class)->create();
        $this->assertInstanceOf(Channel::class, $thread->channel);
    }

    public function test_a_thread_can_have_string_path(){
        $thread = create(Thread::class);
        $this->assertEquals("/threads/{$thread->channel->slug}/{$thread->id}", $thread->path());
    }

    public function test_a_thread_requires_a_title(){
        $this->withExceptionHandling();
        $this->signIn();
        $thread = make(Thread::class, ['title' => null]);
        $this->post('/threads', $thread->toArray())->assertSessionHasErrors('title');

    }

    public function test_a_thread_requires_a_channel_id(){
        $this->withExceptionHandling();
        $this->signIn();
        $thread = make(Thread::class, ['channel_id' => null]);
        $this->post('/threads', $thread->toArray())->assertSessionHasErrors('channel_id');

        $thread = make(Thread::class, ['channel_id' => 9999]);
        $this->post('/threads', $thread->toArray())->assertSessionHasErrors('channel_id');
    }
}
