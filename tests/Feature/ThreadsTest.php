<?php

namespace Tests\Feature;

use App\Channel;
use App\Reply;
use App\Thread;
use App\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;

class ThreadsTest extends TestCase
{

    use DatabaseMigrations;

    public $thread;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->thread = factory(Thread::class)->create();

    }


    public function test_a_user_can_view_threads()
    {

        $this->get('/threads')
            ->assertStatus(200)
            ->assertSee($this->thread->title);
    }

    public function test_a_user_can_view_single_thread()
    {
        $this->get($this->thread->path())
            ->assertStatus(200)->assertSee($this->thread->title);
    }

    public function test_a_user_can_read_replies_associated_with_a_thread()
    {
        $reply = factory(Reply::class)
            ->create(['thread_id' => $this->thread->id]);

        $this->get($this->thread->path())
            ->assertSee($reply->body);
    }

    public function test_an_auth_user_can_create_thread()
    {
        $this->withoutExceptionHandling();
        //Given a signed in user
        $this->signIn();
        //Create a thread
        $thread = make('App\Thread', ['user_id' => auth()->id()]);
        $response = $this->post('/threads', $thread->toArray());
        //Visible in the thread page
        $this->get($response->headers->get('location'))
            ->assertSee($thread->title)
            ->assertSee($thread->body);
    }

    public function test_guest_may_not_create_thread()
    {
        $thread = make(Thread::class);
        $this->post('/threads', $thread->toArray())
            ->assertRedirect(route('login'));
    }

    public function test_threads_can_be_filter_by_channel()
    {
        $this->withoutExceptionHandling();
        $channel = create(Channel::class);
        $threadInchannel = create(Thread::class, ['channel_id' => $channel->id]);
        $this->get("/threads/{$threadInchannel->channel->slug}")->assertSee($threadInchannel->title);
    }

    public function test_threads_can_be_filter_by_user()
    {
        $this->signIn(create(User::class, ['name' => 'john']));
        $threadsByJohn = create(Thread::class, ['user_id' => auth()->id()]);
        $threadsNotByJohn = create(Thread::class);
        $this->get('/threads?by=john')->assertSee($threadsByJohn->title)->assertDontSee($threadsNotByJohn->title);
    }

    public function test_threads_can_be_filter_by_popularity(){
        $threadWithThreeReplies = create(Thread::class);
        create(Reply::class, ['thread_id' => $threadWithThreeReplies->id], 3);
        $threadWithTwoReplies = create(Thread::class);
        create(Reply::class, ['thread_id' => $threadWithTwoReplies->id], 2);
        $threadWithNoReplies = $this->thread;

        $response = $this->getJson('/threads?popular=1')->json();
        $this->assertEquals([3,2,0], array_column($response, "replies_count"));
    }

}
